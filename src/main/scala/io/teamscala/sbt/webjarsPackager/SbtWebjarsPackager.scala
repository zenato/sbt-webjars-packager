package io.teamscala.sbt.webjarsPackager

import java.io.File

import com.typesafe.sbt.gzip.SbtGzip
import com.typesafe.sbt.web.{PathMapping, SbtWeb}
import org.webjars.RequireJS.WEBJARS_MAVEN_PREFIX
import org.webjars.WebJarAssetLocator.WEBJARS_PATH_PREFIX
import sbt.Keys._
import sbt._

object Import extends ResourceBuilders {

  object WebjarsPackagerKeys {
    val resources = SettingKey[Seq[Resource]]("webjars-packager-resources", "External resources.")

    val webjarsPackager = TaskKey[Seq[PathMapping]]("webjars-packager", "The web assets distribution task.")
    val fetch = TaskKey[Seq[File]]("webjars-packager-fetch", "Fetch external resource.")
    val makePomProperties = TaskKey[File]("webjars-packager-make-pom-properties", "Generates a pom properties.")
  }

}

object SbtWebjarsPackager extends AutoPlugin {

  override def requires = SbtWeb && SbtGzip

  override def trigger = AllRequirements

  val autoImport = Import

  import SbtGzip.autoImport._
  import SbtWeb.autoImport._
  import WebKeys._
  import autoImport._
  import WebjarsPackagerKeys._

  override def projectSettings: Seq[Def.Setting[_]] = Seq(
    excludeFilter in gzip := (excludeFilter in gzip).value || relativizeFileFilter((webModuleDirectory in Assets).value),
    makePomProperties := {
      val pomProperties = target.value / "pom.properties"
      IO.write(pomProperties,
        s"""#Generated by SBT
          |#${new java.util.Date}
          |version=${version.value}
          |groupId=${organization.value}
          |artifactId=${moduleName.value}
          |""".stripMargin
      )
      pomProperties
    },
    exportedMappings in Assets <++= Def.task {
      val prefix = s"$WEBJARS_MAVEN_PREFIX/${moduleName.value}"
      Seq(
        makePom.value -> s"$prefix/pom.xml",
        makePomProperties.value -> s"$prefix/pom.properties"
      )
    },

    target in webjarsPackager := baseDirectory.value / "dist",
    webjarsPackager := {
      println("packager...")
      val prefix = s"$WEBJARS_PATH_PREFIX/${moduleName.value}/${version.value}/"
      val pomDir = s"$WEBJARS_MAVEN_PREFIX/${moduleName.value}/"
      (exportedMappings in Assets).value.collect {
        case (file, path) if !file.isDirectory && !path.startsWith(pomDir) =>
          val targetFile = (target in webjarsPackager).value / path.stripPrefix(prefix)
          IO.copyFile(file, targetFile)
          targetFile -> path
      }
    },
    webjarsPackager := webjarsPackager.dependsOn(assets in Assets).value,

    packageBin in Compile := (packageBin in Compile).dependsOn(webjarsPackager).value,
    cleanFiles += (target in webjarsPackager).value,

    target in (Assets, fetch) := webTarget.value / "webjars-packager-resources" / "main",
    target in (TestAssets, fetch) := webTarget.value / "webjars-packager-resources" / "test"
  ) ++ inConfig(Assets)(unscopedSettings) ++ inConfig(TestAssets)(unscopedSettings)

  val unscopedSettings = Seq(
    resources := Nil,
    fetch := {
      val downloadDir = (target in fetch).value
      resources.value.map { resource =>
        val file = downloadDir / resource.group.getOrElse(".") / resource.path
        if (file.exists) IO.delete(file)
        IO.download(resource.url, file)
        file
      }
    },
    sourceGenerators += fetch.taskValue,
    managedSourceDirectories += (target in fetch).value
  )

  def relativizeFileFilter(dir: File) = new FileFilter {
    def accept(f: File): Boolean = IO.relativize(dir, f).isDefined
  }
}
